        -:    0:Source:/home/spinoza/github/alpha/algebraic_reducers/tests/test_welford_accumulator.cpp
        -:    1:#include <gtest/gtest.h>
        -:    2:#include <vector>
        -:    3:#include <array>
        -:    4:#include <cmath>
        -:    5:#include <limits>
        -:    6:#include <random>
        -:    7:#include "welford_accumulator.hpp"
        -:    8:#include "kbn_sum.hpp"
        -:    9:
        -:   10:using namespace algebraic_accumulators;
        -:   11:using namespace algebraic_accumulator;
        -:   12:
        -:   13:class WelfordAccumulatorTest : public ::testing::Test {
        -:   14:protected:
       21:   15:    void SetUp() override {}
       21:   16:    void TearDown() override {}
        -:   17:    
        -:   18:    // Helper function to check floating point equality with tolerance
        -:   19:    template<typename T>
       24:   20:    bool nearly_equal(T a, T b, T tolerance = 1e-12) {
       24:   21:        return std::abs(a - b) <= tolerance;
        -:   22:    }
        -:   23:    
        -:   24:    // Helper to calculate expected variance
        -:   25:    template<typename Container>
        8:   26:    double calculate_expected_variance(const Container& values, bool sample = false) {
       8*:   27:        if (values.empty()) return 0.0;
        -:   28:        
        8:   29:        double mean = 0.0;
    21033:   30:        for (auto val : values) {
    21025:   31:            mean += val;
        -:   32:        }
        8:   33:        mean /= values.size();
        -:   34:        
        8:   35:        double variance = 0.0;
    21033:   36:        for (auto val : values) {
    21025:   37:            variance += (val - mean) * (val - mean);
        -:   38:        }
        -:   39:        
        8:   40:        if (sample && values.size() > 1) {
        2:   41:            variance /= (values.size() - 1);
        -:   42:        } else {
        6:   43:            variance /= values.size();
        -:   44:        }
        -:   45:        
        8:   46:        return variance;
        -:   47:    }
        -:   48:    
        -:   49:    template<typename Container>
        6:   50:    double calculate_expected_mean(const Container& values) {
       6*:   51:        if (values.empty()) return 0.0;
        -:   52:        
        6:   53:        double sum = 0.0;
    11026:   54:        for (auto val : values) {
    11020:   55:            sum += val;
        -:   56:        }
        6:   57:        return sum / values.size();
        -:   58:    }
        -:   59:};
        -:   60:
        -:   61:// Test default constructor
        4:   62:TEST_F(WelfordAccumulatorTest, DefaultConstructor) {
        1:   63:    welford_accumulator<kbn_sum<double>> acc;
        -:   64:    
       1*:   65:    EXPECT_EQ(acc.count, 0u);
       1*:   66:    EXPECT_EQ(acc.mean(), 0.0);
       1*:   67:    EXPECT_EQ(acc.size(), 0u);
       1*:   68:    EXPECT_EQ(acc.sum(), 0.0);
       1*:   69:    EXPECT_EQ(static_cast<double>(acc), 0.0);
        1:   70:}
------------------
_ZN46WelfordAccumulatorTest_DefaultConstructor_TestC2Ev:
        1:   62:TEST_F(WelfordAccumulatorTest, DefaultConstructor) {
------------------
_ZN46WelfordAccumulatorTest_DefaultConstructor_TestD0Ev:
        1:   62:TEST_F(WelfordAccumulatorTest, DefaultConstructor) {
------------------
_ZN46WelfordAccumulatorTest_DefaultConstructor_TestD2Ev:
        1:   62:TEST_F(WelfordAccumulatorTest, DefaultConstructor) {
------------------
_ZN46WelfordAccumulatorTest_DefaultConstructor_Test8TestBodyEv:
        1:   62:TEST_F(WelfordAccumulatorTest, DefaultConstructor) {
        1:   63:    welford_accumulator<kbn_sum<double>> acc;
        -:   64:    
       1*:   65:    EXPECT_EQ(acc.count, 0u);
       1*:   66:    EXPECT_EQ(acc.mean(), 0.0);
       1*:   67:    EXPECT_EQ(acc.size(), 0u);
       1*:   68:    EXPECT_EQ(acc.sum(), 0.0);
       1*:   69:    EXPECT_EQ(static_cast<double>(acc), 0.0);
        1:   70:}
------------------
        -:   71:
        -:   72:// Test constructor with initial value
        4:   73:TEST_F(WelfordAccumulatorTest, ValueConstructor) {
        1:   74:    welford_accumulator<kbn_sum<double>> acc(5.0);
        -:   75:    
       1*:   76:    EXPECT_EQ(acc.count, 1u);
       1*:   77:    EXPECT_EQ(acc.mean(), 5.0);
       1*:   78:    EXPECT_EQ(acc.size(), 1u);
       1*:   79:    EXPECT_EQ(acc.sum(), 5.0);
       1*:   80:    EXPECT_EQ(static_cast<double>(acc), 5.0);
       1*:   81:    EXPECT_EQ(acc.variance(), 0.0); // Single value has no variance
        1:   82:}
------------------
_ZN44WelfordAccumulatorTest_ValueConstructor_TestC2Ev:
        1:   73:TEST_F(WelfordAccumulatorTest, ValueConstructor) {
------------------
_ZN44WelfordAccumulatorTest_ValueConstructor_TestD0Ev:
        1:   73:TEST_F(WelfordAccumulatorTest, ValueConstructor) {
------------------
_ZN44WelfordAccumulatorTest_ValueConstructor_TestD2Ev:
        1:   73:TEST_F(WelfordAccumulatorTest, ValueConstructor) {
------------------
_ZN44WelfordAccumulatorTest_ValueConstructor_Test8TestBodyEv:
        1:   73:TEST_F(WelfordAccumulatorTest, ValueConstructor) {
        1:   74:    welford_accumulator<kbn_sum<double>> acc(5.0);
        -:   75:    
       1*:   76:    EXPECT_EQ(acc.count, 1u);
       1*:   77:    EXPECT_EQ(acc.mean(), 5.0);
       1*:   78:    EXPECT_EQ(acc.size(), 1u);
       1*:   79:    EXPECT_EQ(acc.sum(), 5.0);
       1*:   80:    EXPECT_EQ(static_cast<double>(acc), 5.0);
       1*:   81:    EXPECT_EQ(acc.variance(), 0.0); // Single value has no variance
        1:   82:}
------------------
        -:   83:
        -:   84:// Test copy constructor
        4:   85:TEST_F(WelfordAccumulatorTest, CopyConstructor) {
        1:   86:    welford_accumulator<kbn_sum<double>> acc1(3.14);
        1:   87:    welford_accumulator<kbn_sum<double>> acc2(acc1);
        -:   88:    
       1*:   89:    EXPECT_EQ(acc2.count, acc1.count);
       1*:   90:    EXPECT_EQ(acc2.mean(), acc1.mean());
       1*:   91:    EXPECT_EQ(acc2.variance(), acc1.variance());
        1:   92:}
------------------
_ZN43WelfordAccumulatorTest_CopyConstructor_TestC2Ev:
        1:   85:TEST_F(WelfordAccumulatorTest, CopyConstructor) {
------------------
_ZN43WelfordAccumulatorTest_CopyConstructor_TestD0Ev:
        1:   85:TEST_F(WelfordAccumulatorTest, CopyConstructor) {
------------------
_ZN43WelfordAccumulatorTest_CopyConstructor_TestD2Ev:
        1:   85:TEST_F(WelfordAccumulatorTest, CopyConstructor) {
------------------
_ZN43WelfordAccumulatorTest_CopyConstructor_Test8TestBodyEv:
        1:   85:TEST_F(WelfordAccumulatorTest, CopyConstructor) {
        1:   86:    welford_accumulator<kbn_sum<double>> acc1(3.14);
        1:   87:    welford_accumulator<kbn_sum<double>> acc2(acc1);
        -:   88:    
       1*:   89:    EXPECT_EQ(acc2.count, acc1.count);
       1*:   90:    EXPECT_EQ(acc2.mean(), acc1.mean());
       1*:   91:    EXPECT_EQ(acc2.variance(), acc1.variance());
        1:   92:}
------------------
        -:   93:
        -:   94:// Test adding single values
        4:   95:TEST_F(WelfordAccumulatorTest, AddingSingleValues) {
        1:   96:    welford_accumulator<kbn_sum<double>> acc;
        -:   97:    
        1:   98:    acc += 1.0;
       1*:   99:    EXPECT_EQ(acc.count, 1u);
       1*:  100:    EXPECT_EQ(acc.mean(), 1.0);
       1*:  101:    EXPECT_EQ(acc.sum(), 1.0);
        -:  102:    
        1:  103:    acc += 3.0;
       1*:  104:    EXPECT_EQ(acc.count, 2u);
       1*:  105:    EXPECT_EQ(acc.mean(), 2.0);
       1*:  106:    EXPECT_EQ(acc.sum(), 4.0);
        -:  107:    
        1:  108:    acc += 5.0;
       1*:  109:    EXPECT_EQ(acc.count, 3u);
       1*:  110:    EXPECT_EQ(acc.mean(), 3.0);
       1*:  111:    EXPECT_EQ(acc.sum(), 9.0);
        1:  112:}
------------------
_ZN46WelfordAccumulatorTest_AddingSingleValues_TestC2Ev:
        1:   95:TEST_F(WelfordAccumulatorTest, AddingSingleValues) {
------------------
_ZN46WelfordAccumulatorTest_AddingSingleValues_TestD0Ev:
        1:   95:TEST_F(WelfordAccumulatorTest, AddingSingleValues) {
------------------
_ZN46WelfordAccumulatorTest_AddingSingleValues_TestD2Ev:
        1:   95:TEST_F(WelfordAccumulatorTest, AddingSingleValues) {
------------------
_ZN46WelfordAccumulatorTest_AddingSingleValues_Test8TestBodyEv:
        1:   95:TEST_F(WelfordAccumulatorTest, AddingSingleValues) {
        1:   96:    welford_accumulator<kbn_sum<double>> acc;
        -:   97:    
        1:   98:    acc += 1.0;
       1*:   99:    EXPECT_EQ(acc.count, 1u);
       1*:  100:    EXPECT_EQ(acc.mean(), 1.0);
       1*:  101:    EXPECT_EQ(acc.sum(), 1.0);
        -:  102:    
        1:  103:    acc += 3.0;
       1*:  104:    EXPECT_EQ(acc.count, 2u);
       1*:  105:    EXPECT_EQ(acc.mean(), 2.0);
       1*:  106:    EXPECT_EQ(acc.sum(), 4.0);
        -:  107:    
        1:  108:    acc += 5.0;
       1*:  109:    EXPECT_EQ(acc.count, 3u);
       1*:  110:    EXPECT_EQ(acc.mean(), 3.0);
       1*:  111:    EXPECT_EQ(acc.sum(), 9.0);
        1:  112:}
------------------
        -:  113:
        -:  114:// Test variance calculation
        4:  115:TEST_F(WelfordAccumulatorTest, VarianceCalculation) {
        1:  116:    welford_accumulator<kbn_sum<double>> acc;
        2:  117:    std::vector<double> values = {1.0, 2.0, 3.0, 4.0, 5.0};
        -:  118:    
        6:  119:    for (double val : values) {
        5:  120:        acc += val;
        -:  121:    }
        -:  122:    
        1:  123:    double expected_mean = calculate_expected_mean(values);
        1:  124:    double expected_variance = calculate_expected_variance(values, false);
        1:  125:    double expected_sample_variance = calculate_expected_variance(values, true);
        -:  126:    
       1*:  127:    EXPECT_TRUE(nearly_equal(acc.mean(), expected_mean, 1e-10));
       1*:  128:    EXPECT_TRUE(nearly_equal(acc.variance(), expected_variance, 1e-10));
       1*:  129:    EXPECT_TRUE(nearly_equal(acc.sample_variance(), expected_sample_variance, 1e-10));
        1:  130:}
------------------
_ZN47WelfordAccumulatorTest_VarianceCalculation_TestC2Ev:
        1:  115:TEST_F(WelfordAccumulatorTest, VarianceCalculation) {
------------------
_ZN47WelfordAccumulatorTest_VarianceCalculation_TestD0Ev:
        1:  115:TEST_F(WelfordAccumulatorTest, VarianceCalculation) {
------------------
_ZN47WelfordAccumulatorTest_VarianceCalculation_TestD2Ev:
        1:  115:TEST_F(WelfordAccumulatorTest, VarianceCalculation) {
------------------
_ZN47WelfordAccumulatorTest_VarianceCalculation_Test8TestBodyEv:
        1:  115:TEST_F(WelfordAccumulatorTest, VarianceCalculation) {
        1:  116:    welford_accumulator<kbn_sum<double>> acc;
        2:  117:    std::vector<double> values = {1.0, 2.0, 3.0, 4.0, 5.0};
        -:  118:    
        6:  119:    for (double val : values) {
        5:  120:        acc += val;
        -:  121:    }
        -:  122:    
        1:  123:    double expected_mean = calculate_expected_mean(values);
        1:  124:    double expected_variance = calculate_expected_variance(values, false);
        1:  125:    double expected_sample_variance = calculate_expected_variance(values, true);
        -:  126:    
       1*:  127:    EXPECT_TRUE(nearly_equal(acc.mean(), expected_mean, 1e-10));
       1*:  128:    EXPECT_TRUE(nearly_equal(acc.variance(), expected_variance, 1e-10));
       1*:  129:    EXPECT_TRUE(nearly_equal(acc.sample_variance(), expected_sample_variance, 1e-10));
        1:  130:}
------------------
        -:  131:
        -:  132:// Test with floating point values
        4:  133:TEST_F(WelfordAccumulatorTest, FloatingPointValues) {
        1:  134:    welford_accumulator<kbn_sum<double>> acc;
        2:  135:    std::vector<double> values = {1.1, 2.2, 3.3, 4.4, 5.5};
        -:  136:    
        6:  137:    for (double val : values) {
        5:  138:        acc += val;
        -:  139:    }
        -:  140:    
        1:  141:    double expected_mean = calculate_expected_mean(values);
        1:  142:    double expected_variance = calculate_expected_variance(values, false);
        -:  143:    
       1*:  144:    EXPECT_TRUE(nearly_equal(acc.mean(), expected_mean, 1e-10));
       1*:  145:    EXPECT_TRUE(nearly_equal(acc.variance(), expected_variance, 1e-10));
       1*:  146:    EXPECT_EQ(acc.size(), 5u);
       1*:  147:    EXPECT_TRUE(nearly_equal(acc.sum(), 16.5, 1e-10));
        1:  148:}
------------------
_ZN47WelfordAccumulatorTest_FloatingPointValues_TestC2Ev:
        1:  133:TEST_F(WelfordAccumulatorTest, FloatingPointValues) {
------------------
_ZN47WelfordAccumulatorTest_FloatingPointValues_TestD0Ev:
        1:  133:TEST_F(WelfordAccumulatorTest, FloatingPointValues) {
------------------
_ZN47WelfordAccumulatorTest_FloatingPointValues_TestD2Ev:
        1:  133:TEST_F(WelfordAccumulatorTest, FloatingPointValues) {
------------------
_ZN47WelfordAccumulatorTest_FloatingPointValues_Test8TestBodyEv:
        1:  133:TEST_F(WelfordAccumulatorTest, FloatingPointValues) {
        1:  134:    welford_accumulator<kbn_sum<double>> acc;
        2:  135:    std::vector<double> values = {1.1, 2.2, 3.3, 4.4, 5.5};
        -:  136:    
        6:  137:    for (double val : values) {
        5:  138:        acc += val;
        -:  139:    }
        -:  140:    
        1:  141:    double expected_mean = calculate_expected_mean(values);
        1:  142:    double expected_variance = calculate_expected_variance(values, false);
        -:  143:    
       1*:  144:    EXPECT_TRUE(nearly_equal(acc.mean(), expected_mean, 1e-10));
       1*:  145:    EXPECT_TRUE(nearly_equal(acc.variance(), expected_variance, 1e-10));
       1*:  146:    EXPECT_EQ(acc.size(), 5u);
       1*:  147:    EXPECT_TRUE(nearly_equal(acc.sum(), 16.5, 1e-10));
        1:  148:}
------------------
        -:  149:
        -:  150:// Test with negative values
        4:  151:TEST_F(WelfordAccumulatorTest, NegativeValues) {
        1:  152:    welford_accumulator<kbn_sum<double>> acc;
        2:  153:    std::vector<double> values = {-1.0, -2.0, -3.0, -4.0, -5.0};
        -:  154:    
        6:  155:    for (double val : values) {
        5:  156:        acc += val;
        -:  157:    }
        -:  158:    
        1:  159:    double expected_mean = calculate_expected_mean(values);
        1:  160:    double expected_variance = calculate_expected_variance(values, false);
        -:  161:    
       1*:  162:    EXPECT_TRUE(nearly_equal(acc.mean(), expected_mean, 1e-10));
       1*:  163:    EXPECT_TRUE(nearly_equal(acc.variance(), expected_variance, 1e-10));
       1*:  164:    EXPECT_EQ(acc.sum(), -15.0);
        1:  165:}
------------------
_ZN42WelfordAccumulatorTest_NegativeValues_TestC2Ev:
        1:  151:TEST_F(WelfordAccumulatorTest, NegativeValues) {
------------------
_ZN42WelfordAccumulatorTest_NegativeValues_TestD0Ev:
        1:  151:TEST_F(WelfordAccumulatorTest, NegativeValues) {
------------------
_ZN42WelfordAccumulatorTest_NegativeValues_TestD2Ev:
        1:  151:TEST_F(WelfordAccumulatorTest, NegativeValues) {
------------------
_ZN42WelfordAccumulatorTest_NegativeValues_Test8TestBodyEv:
        1:  151:TEST_F(WelfordAccumulatorTest, NegativeValues) {
        1:  152:    welford_accumulator<kbn_sum<double>> acc;
        2:  153:    std::vector<double> values = {-1.0, -2.0, -3.0, -4.0, -5.0};
        -:  154:    
        6:  155:    for (double val : values) {
        5:  156:        acc += val;
        -:  157:    }
        -:  158:    
        1:  159:    double expected_mean = calculate_expected_mean(values);
        1:  160:    double expected_variance = calculate_expected_variance(values, false);
        -:  161:    
       1*:  162:    EXPECT_TRUE(nearly_equal(acc.mean(), expected_mean, 1e-10));
       1*:  163:    EXPECT_TRUE(nearly_equal(acc.variance(), expected_variance, 1e-10));
       1*:  164:    EXPECT_EQ(acc.sum(), -15.0);
        1:  165:}
------------------
        -:  166:
        -:  167:// Test with mixed positive and negative values
        4:  168:TEST_F(WelfordAccumulatorTest, MixedSignValues) {
        1:  169:    welford_accumulator<kbn_sum<double>> acc;
        2:  170:    std::vector<double> values = {-2.0, 1.0, -1.0, 2.0, 0.0};
        -:  171:    
        6:  172:    for (double val : values) {
        5:  173:        acc += val;
        -:  174:    }
        -:  175:    
        1:  176:    double expected_mean = calculate_expected_mean(values);
        1:  177:    double expected_variance = calculate_expected_variance(values, false);
        -:  178:    
       1*:  179:    EXPECT_TRUE(nearly_equal(acc.mean(), expected_mean, 1e-10));
       1*:  180:    EXPECT_TRUE(nearly_equal(acc.variance(), expected_variance, 1e-10));
       1*:  181:    EXPECT_TRUE(nearly_equal(acc.sum(), 0.0, 1e-10));
        1:  182:}
------------------
_ZN43WelfordAccumulatorTest_MixedSignValues_TestC2Ev:
        1:  168:TEST_F(WelfordAccumulatorTest, MixedSignValues) {
------------------
_ZN43WelfordAccumulatorTest_MixedSignValues_TestD0Ev:
        1:  168:TEST_F(WelfordAccumulatorTest, MixedSignValues) {
------------------
_ZN43WelfordAccumulatorTest_MixedSignValues_TestD2Ev:
        1:  168:TEST_F(WelfordAccumulatorTest, MixedSignValues) {
------------------
_ZN43WelfordAccumulatorTest_MixedSignValues_Test8TestBodyEv:
        1:  168:TEST_F(WelfordAccumulatorTest, MixedSignValues) {
        1:  169:    welford_accumulator<kbn_sum<double>> acc;
        2:  170:    std::vector<double> values = {-2.0, 1.0, -1.0, 2.0, 0.0};
        -:  171:    
        6:  172:    for (double val : values) {
        5:  173:        acc += val;
        -:  174:    }
        -:  175:    
        1:  176:    double expected_mean = calculate_expected_mean(values);
        1:  177:    double expected_variance = calculate_expected_variance(values, false);
        -:  178:    
       1*:  179:    EXPECT_TRUE(nearly_equal(acc.mean(), expected_mean, 1e-10));
       1*:  180:    EXPECT_TRUE(nearly_equal(acc.variance(), expected_variance, 1e-10));
       1*:  181:    EXPECT_TRUE(nearly_equal(acc.sum(), 0.0, 1e-10));
        1:  182:}
------------------
        -:  183:
        -:  184:// Test sample variance vs population variance
        4:  185:TEST_F(WelfordAccumulatorTest, SampleVsPopulationVariance) {
        1:  186:    welford_accumulator<kbn_sum<double>> acc;
        2:  187:    std::vector<double> values = {1.0, 2.0, 3.0, 4.0};
        -:  188:    
        5:  189:    for (double val : values) {
        4:  190:        acc += val;
        -:  191:    }
        -:  192:    
        -:  193:    // Population variance: divide by n
        1:  194:    double population_var = acc.variance();
        -:  195:    // Sample variance: divide by n-1
        1:  196:    double sample_var = acc.sample_variance();
        -:  197:    
       1*:  198:    EXPECT_GT(sample_var, population_var);
       1*:  199:    EXPECT_TRUE(nearly_equal(sample_var, population_var * 4.0 / 3.0, 1e-10));
        1:  200:}
------------------
_ZN54WelfordAccumulatorTest_SampleVsPopulationVariance_TestC2Ev:
        1:  185:TEST_F(WelfordAccumulatorTest, SampleVsPopulationVariance) {
------------------
_ZN54WelfordAccumulatorTest_SampleVsPopulationVariance_TestD0Ev:
        1:  185:TEST_F(WelfordAccumulatorTest, SampleVsPopulationVariance) {
------------------
_ZN54WelfordAccumulatorTest_SampleVsPopulationVariance_TestD2Ev:
        1:  185:TEST_F(WelfordAccumulatorTest, SampleVsPopulationVariance) {
------------------
_ZN54WelfordAccumulatorTest_SampleVsPopulationVariance_Test8TestBodyEv:
        1:  185:TEST_F(WelfordAccumulatorTest, SampleVsPopulationVariance) {
        1:  186:    welford_accumulator<kbn_sum<double>> acc;
        2:  187:    std::vector<double> values = {1.0, 2.0, 3.0, 4.0};
        -:  188:    
        5:  189:    for (double val : values) {
        4:  190:        acc += val;
        -:  191:    }
        -:  192:    
        -:  193:    // Population variance: divide by n
        1:  194:    double population_var = acc.variance();
        -:  195:    // Sample variance: divide by n-1
        1:  196:    double sample_var = acc.sample_variance();
        -:  197:    
       1*:  198:    EXPECT_GT(sample_var, population_var);
       1*:  199:    EXPECT_TRUE(nearly_equal(sample_var, population_var * 4.0 / 3.0, 1e-10));
        1:  200:}
------------------
        -:  201:
        -:  202:// Test single value edge case for sample variance
        4:  203:TEST_F(WelfordAccumulatorTest, SingleValueSampleVariance) {
        1:  204:    welford_accumulator<kbn_sum<double>> acc;
        1:  205:    acc += 5.0;
        -:  206:    
       1*:  207:    EXPECT_EQ(acc.variance(), 0.0);
        -:  208:    
        -:  209:    // Sample variance with n=1 should divide by 0, which gives infinity or undefined behavior
        -:  210:    // But mathematically it's undefined, so we expect infinity
        1:  211:    double sample_var = acc.sample_variance();
       1*:  212:    EXPECT_TRUE(std::isinf(sample_var) || std::isnan(sample_var));
        1:  213:}
------------------
_ZN53WelfordAccumulatorTest_SingleValueSampleVariance_TestC2Ev:
        1:  203:TEST_F(WelfordAccumulatorTest, SingleValueSampleVariance) {
------------------
_ZN53WelfordAccumulatorTest_SingleValueSampleVariance_TestD0Ev:
        1:  203:TEST_F(WelfordAccumulatorTest, SingleValueSampleVariance) {
------------------
_ZN53WelfordAccumulatorTest_SingleValueSampleVariance_TestD2Ev:
        1:  203:TEST_F(WelfordAccumulatorTest, SingleValueSampleVariance) {
------------------
_ZN53WelfordAccumulatorTest_SingleValueSampleVariance_Test8TestBodyEv:
        1:  203:TEST_F(WelfordAccumulatorTest, SingleValueSampleVariance) {
        1:  204:    welford_accumulator<kbn_sum<double>> acc;
        1:  205:    acc += 5.0;
        -:  206:    
       1*:  207:    EXPECT_EQ(acc.variance(), 0.0);
        -:  208:    
        -:  209:    // Sample variance with n=1 should divide by 0, which gives infinity or undefined behavior
        -:  210:    // But mathematically it's undefined, so we expect infinity
        1:  211:    double sample_var = acc.sample_variance();
       1*:  212:    EXPECT_TRUE(std::isinf(sample_var) || std::isnan(sample_var));
        1:  213:}
------------------
        -:  214:
        -:  215:// Test empty accumulator edge cases
        4:  216:TEST_F(WelfordAccumulatorTest, EmptyAccumulatorEdgeCases) {
        1:  217:    welford_accumulator<kbn_sum<double>> acc;
        -:  218:    
        -:  219:    // For empty accumulator with count=0:
        -:  220:    // - variance calculation: M2/count = 0/0 = NaN
        -:  221:    // - sample variance: M2/(count-1) = 0/(-1) = 0
       1*:  222:    EXPECT_TRUE(std::isnan(acc.variance()));
       1*:  223:    EXPECT_EQ(acc.sample_variance(), 0.0);
       1*:  224:    EXPECT_EQ(acc.mean(), 0.0);
       1*:  225:    EXPECT_EQ(acc.sum(), 0.0);
       1*:  226:    EXPECT_EQ(acc.size(), 0u);
        1:  227:}
------------------
_ZN53WelfordAccumulatorTest_EmptyAccumulatorEdgeCases_TestC2Ev:
        1:  216:TEST_F(WelfordAccumulatorTest, EmptyAccumulatorEdgeCases) {
------------------
_ZN53WelfordAccumulatorTest_EmptyAccumulatorEdgeCases_TestD0Ev:
        1:  216:TEST_F(WelfordAccumulatorTest, EmptyAccumulatorEdgeCases) {
------------------
_ZN53WelfordAccumulatorTest_EmptyAccumulatorEdgeCases_TestD2Ev:
        1:  216:TEST_F(WelfordAccumulatorTest, EmptyAccumulatorEdgeCases) {
------------------
_ZN53WelfordAccumulatorTest_EmptyAccumulatorEdgeCases_Test8TestBodyEv:
        1:  216:TEST_F(WelfordAccumulatorTest, EmptyAccumulatorEdgeCases) {
        1:  217:    welford_accumulator<kbn_sum<double>> acc;
        -:  218:    
        -:  219:    // For empty accumulator with count=0:
        -:  220:    // - variance calculation: M2/count = 0/0 = NaN
        -:  221:    // - sample variance: M2/(count-1) = 0/(-1) = 0
       1*:  222:    EXPECT_TRUE(std::isnan(acc.variance()));
       1*:  223:    EXPECT_EQ(acc.sample_variance(), 0.0);
       1*:  224:    EXPECT_EQ(acc.mean(), 0.0);
       1*:  225:    EXPECT_EQ(acc.sum(), 0.0);
       1*:  226:    EXPECT_EQ(acc.size(), 0u);
        1:  227:}
------------------
        -:  228:
        -:  229:// Test large numbers for numerical stability
        4:  230:TEST_F(WelfordAccumulatorTest, LargeNumbers) {
        1:  231:    welford_accumulator<kbn_sum<double>> acc;
        2:  232:    std::vector<double> values = {1e10, 1e10 + 1, 1e10 + 2, 1e10 + 3};
        -:  233:    
        5:  234:    for (double val : values) {
        4:  235:        acc += val;
        -:  236:    }
        -:  237:    
       1*:  238:    EXPECT_TRUE(nearly_equal(acc.mean(), 1e10 + 1.5, 1e-6));
       1*:  239:    EXPECT_GT(acc.variance(), 0.0);
        1:  240:}
------------------
_ZN40WelfordAccumulatorTest_LargeNumbers_TestC2Ev:
        1:  230:TEST_F(WelfordAccumulatorTest, LargeNumbers) {
------------------
_ZN40WelfordAccumulatorTest_LargeNumbers_TestD0Ev:
        1:  230:TEST_F(WelfordAccumulatorTest, LargeNumbers) {
------------------
_ZN40WelfordAccumulatorTest_LargeNumbers_TestD2Ev:
        1:  230:TEST_F(WelfordAccumulatorTest, LargeNumbers) {
------------------
_ZN40WelfordAccumulatorTest_LargeNumbers_Test8TestBodyEv:
        1:  230:TEST_F(WelfordAccumulatorTest, LargeNumbers) {
        1:  231:    welford_accumulator<kbn_sum<double>> acc;
        2:  232:    std::vector<double> values = {1e10, 1e10 + 1, 1e10 + 2, 1e10 + 3};
        -:  233:    
        5:  234:    for (double val : values) {
        4:  235:        acc += val;
        -:  236:    }
        -:  237:    
       1*:  238:    EXPECT_TRUE(nearly_equal(acc.mean(), 1e10 + 1.5, 1e-6));
       1*:  239:    EXPECT_GT(acc.variance(), 0.0);
        1:  240:}
------------------
        -:  241:
        -:  242:// Test many small values for precision
        4:  243:TEST_F(WelfordAccumulatorTest, ManySmallValues) {
        1:  244:    welford_accumulator<kbn_sum<double>> acc;
        1:  245:    std::vector<double> values(1000, 0.001);
        -:  246:    
     1001:  247:    for (double val : values) {
     1000:  248:        acc += val;
        -:  249:    }
        -:  250:    
       1*:  251:    EXPECT_TRUE(nearly_equal(acc.mean(), 0.001, 1e-10));
       1*:  252:    EXPECT_TRUE(nearly_equal(acc.sum(), 1.0, 1e-10));
       1*:  253:    EXPECT_TRUE(nearly_equal(acc.variance(), 0.0, 1e-15)); // All values are identical
       1*:  254:    EXPECT_EQ(acc.size(), 1000u);
        1:  255:}
------------------
_ZN43WelfordAccumulatorTest_ManySmallValues_TestC2Ev:
        1:  243:TEST_F(WelfordAccumulatorTest, ManySmallValues) {
------------------
_ZN43WelfordAccumulatorTest_ManySmallValues_TestD0Ev:
        1:  243:TEST_F(WelfordAccumulatorTest, ManySmallValues) {
------------------
_ZN43WelfordAccumulatorTest_ManySmallValues_TestD2Ev:
        1:  243:TEST_F(WelfordAccumulatorTest, ManySmallValues) {
------------------
_ZN43WelfordAccumulatorTest_ManySmallValues_Test8TestBodyEv:
        1:  243:TEST_F(WelfordAccumulatorTest, ManySmallValues) {
        1:  244:    welford_accumulator<kbn_sum<double>> acc;
        1:  245:    std::vector<double> values(1000, 0.001);
        -:  246:    
     1001:  247:    for (double val : values) {
     1000:  248:        acc += val;
        -:  249:    }
        -:  250:    
       1*:  251:    EXPECT_TRUE(nearly_equal(acc.mean(), 0.001, 1e-10));
       1*:  252:    EXPECT_TRUE(nearly_equal(acc.sum(), 1.0, 1e-10));
       1*:  253:    EXPECT_TRUE(nearly_equal(acc.variance(), 0.0, 1e-15)); // All values are identical
       1*:  254:    EXPECT_EQ(acc.size(), 1000u);
        1:  255:}
------------------
        -:  256:
        -:  257:// Test using kbn_welford_accumulate alias
        4:  258:TEST_F(WelfordAccumulatorTest, KBNWelfordAlias) {
        1:  259:    kbn_welford_accumulate<double> acc;
        -:  260:    
        1:  261:    acc += 1.0;
        1:  262:    acc += 2.0;
        1:  263:    acc += 3.0;
        -:  264:    
       1*:  265:    EXPECT_EQ(acc.size(), 3u);
       1*:  266:    EXPECT_EQ(acc.mean(), 2.0);
       1*:  267:    EXPECT_EQ(acc.sum(), 6.0);
        1:  268:}
------------------
_ZN43WelfordAccumulatorTest_KBNWelfordAlias_TestC2Ev:
        1:  258:TEST_F(WelfordAccumulatorTest, KBNWelfordAlias) {
------------------
_ZN43WelfordAccumulatorTest_KBNWelfordAlias_TestD0Ev:
        1:  258:TEST_F(WelfordAccumulatorTest, KBNWelfordAlias) {
------------------
_ZN43WelfordAccumulatorTest_KBNWelfordAlias_TestD2Ev:
        1:  258:TEST_F(WelfordAccumulatorTest, KBNWelfordAlias) {
------------------
_ZN43WelfordAccumulatorTest_KBNWelfordAlias_Test8TestBodyEv:
        1:  258:TEST_F(WelfordAccumulatorTest, KBNWelfordAlias) {
        1:  259:    kbn_welford_accumulate<double> acc;
        -:  260:    
        1:  261:    acc += 1.0;
        1:  262:    acc += 2.0;
        1:  263:    acc += 3.0;
        -:  264:    
       1*:  265:    EXPECT_EQ(acc.size(), 3u);
       1*:  266:    EXPECT_EQ(acc.mean(), 2.0);
       1*:  267:    EXPECT_EQ(acc.sum(), 6.0);
        1:  268:}
------------------
        -:  269:
        -:  270:// Test standalone function interfaces
        4:  271:TEST_F(WelfordAccumulatorTest, StandaloneFunctions) {
        1:  272:    welford_accumulator<kbn_sum<double>> acc;
        2:  273:    std::vector<double> values = {1.0, 2.0, 3.0, 4.0, 5.0};
        -:  274:    
        6:  275:    for (double val : values) {
        5:  276:        acc += val;
        -:  277:    }
        -:  278:    
       1*:  279:    EXPECT_EQ(mean(acc), acc.mean());
       1*:  280:    EXPECT_EQ(variance(acc), acc.variance());
       1*:  281:    EXPECT_EQ(sample_variance(acc), acc.sample_variance());
       1*:  282:    EXPECT_EQ(size(acc), acc.size());
       1*:  283:    EXPECT_EQ(sum(acc), acc.sum());
        1:  284:}
------------------
_ZN47WelfordAccumulatorTest_StandaloneFunctions_TestC2Ev:
        1:  271:TEST_F(WelfordAccumulatorTest, StandaloneFunctions) {
------------------
_ZN47WelfordAccumulatorTest_StandaloneFunctions_TestD0Ev:
        1:  271:TEST_F(WelfordAccumulatorTest, StandaloneFunctions) {
------------------
_ZN47WelfordAccumulatorTest_StandaloneFunctions_TestD2Ev:
        1:  271:TEST_F(WelfordAccumulatorTest, StandaloneFunctions) {
------------------
_ZN47WelfordAccumulatorTest_StandaloneFunctions_Test8TestBodyEv:
        1:  271:TEST_F(WelfordAccumulatorTest, StandaloneFunctions) {
        1:  272:    welford_accumulator<kbn_sum<double>> acc;
        2:  273:    std::vector<double> values = {1.0, 2.0, 3.0, 4.0, 5.0};
        -:  274:    
        6:  275:    for (double val : values) {
        5:  276:        acc += val;
        -:  277:    }
        -:  278:    
       1*:  279:    EXPECT_EQ(mean(acc), acc.mean());
       1*:  280:    EXPECT_EQ(variance(acc), acc.variance());
       1*:  281:    EXPECT_EQ(sample_variance(acc), acc.sample_variance());
       1*:  282:    EXPECT_EQ(size(acc), acc.size());
       1*:  283:    EXPECT_EQ(sum(acc), acc.sum());
        1:  284:}
------------------
        -:  285:
        -:  286:// Test with different underlying accumulator types
        4:  287:TEST_F(WelfordAccumulatorTest, DifferentAccumulatorTypes) {
        -:  288:    // Test with kbn_sum as accumulator (which is the intended use case)
        1:  289:    welford_accumulator<kbn_sum<double>> kbn_acc;
        -:  290:    
        1:  291:    kbn_acc += 1.0;
        1:  292:    kbn_acc += 2.0;
        1:  293:    kbn_acc += 3.0;
        -:  294:    
       1*:  295:    EXPECT_EQ(kbn_acc.mean(), 2.0);
       1*:  296:    EXPECT_EQ(kbn_acc.sum(), 6.0);
       1*:  297:    EXPECT_EQ(kbn_acc.size(), 3u);
        1:  298:}
------------------
_ZN53WelfordAccumulatorTest_DifferentAccumulatorTypes_TestC2Ev:
        1:  287:TEST_F(WelfordAccumulatorTest, DifferentAccumulatorTypes) {
------------------
_ZN53WelfordAccumulatorTest_DifferentAccumulatorTypes_TestD0Ev:
        1:  287:TEST_F(WelfordAccumulatorTest, DifferentAccumulatorTypes) {
------------------
_ZN53WelfordAccumulatorTest_DifferentAccumulatorTypes_TestD2Ev:
        1:  287:TEST_F(WelfordAccumulatorTest, DifferentAccumulatorTypes) {
------------------
_ZN53WelfordAccumulatorTest_DifferentAccumulatorTypes_Test8TestBodyEv:
        1:  287:TEST_F(WelfordAccumulatorTest, DifferentAccumulatorTypes) {
        -:  288:    // Test with kbn_sum as accumulator (which is the intended use case)
        1:  289:    welford_accumulator<kbn_sum<double>> kbn_acc;
        -:  290:    
        1:  291:    kbn_acc += 1.0;
        1:  292:    kbn_acc += 2.0;
        1:  293:    kbn_acc += 3.0;
        -:  294:    
       1*:  295:    EXPECT_EQ(kbn_acc.mean(), 2.0);
       1*:  296:    EXPECT_EQ(kbn_acc.sum(), 6.0);
       1*:  297:    EXPECT_EQ(kbn_acc.size(), 3u);
        1:  298:}
------------------
        -:  299:
        -:  300:// Test numerical precision compared to naive calculation
        4:  301:TEST_F(WelfordAccumulatorTest, NumericalPrecision) {
        1:  302:    welford_accumulator<kbn_sum<double>> acc;
        -:  303:    
        -:  304:    // Values designed to test numerical precision
        1:  305:    std::vector<double> values;
     1001:  306:    for (int i = 0; i < 1000; ++i) {
     1000:  307:        values.push_back(1.0 + i * 1e-10);
        -:  308:    }
        -:  309:    
     1001:  310:    for (double val : values) {
     1000:  311:        acc += val;
        -:  312:    }
        -:  313:    
        1:  314:    double expected_mean = calculate_expected_mean(values);
        1:  315:    double expected_variance = calculate_expected_variance(values, false);
        -:  316:    
       1*:  317:    EXPECT_TRUE(nearly_equal(acc.mean(), expected_mean, 1e-8));
       1*:  318:    EXPECT_TRUE(nearly_equal(acc.variance(), expected_variance, 1e-15));
        1:  319:}
------------------
_ZN46WelfordAccumulatorTest_NumericalPrecision_TestC2Ev:
        1:  301:TEST_F(WelfordAccumulatorTest, NumericalPrecision) {
------------------
_ZN46WelfordAccumulatorTest_NumericalPrecision_TestD0Ev:
        1:  301:TEST_F(WelfordAccumulatorTest, NumericalPrecision) {
------------------
_ZN46WelfordAccumulatorTest_NumericalPrecision_TestD2Ev:
        1:  301:TEST_F(WelfordAccumulatorTest, NumericalPrecision) {
------------------
_ZN46WelfordAccumulatorTest_NumericalPrecision_Test8TestBodyEv:
        1:  301:TEST_F(WelfordAccumulatorTest, NumericalPrecision) {
        1:  302:    welford_accumulator<kbn_sum<double>> acc;
        -:  303:    
        -:  304:    // Values designed to test numerical precision
        1:  305:    std::vector<double> values;
     1001:  306:    for (int i = 0; i < 1000; ++i) {
     1000:  307:        values.push_back(1.0 + i * 1e-10);
        -:  308:    }
        -:  309:    
     1001:  310:    for (double val : values) {
     1000:  311:        acc += val;
        -:  312:    }
        -:  313:    
        1:  314:    double expected_mean = calculate_expected_mean(values);
        1:  315:    double expected_variance = calculate_expected_variance(values, false);
        -:  316:    
       1*:  317:    EXPECT_TRUE(nearly_equal(acc.mean(), expected_mean, 1e-8));
       1*:  318:    EXPECT_TRUE(nearly_equal(acc.variance(), expected_variance, 1e-15));
        1:  319:}
------------------
        -:  320:
        -:  321:// Test random values stress test
        4:  322:TEST_F(WelfordAccumulatorTest, RandomValuesStressTest) {
        1:  323:    std::random_device rd;
        1:  324:    std::mt19937 gen(rd());
        1:  325:    std::uniform_real_distribution<double> dis(-100.0, 100.0);
        -:  326:    
        1:  327:    std::vector<double> random_values(10000);
    10001:  328:    for (auto& val : random_values) {
    10000:  329:        val = dis(gen);
        -:  330:    }
        -:  331:    
        1:  332:    welford_accumulator<kbn_sum<double>> acc;
    10001:  333:    for (double val : random_values) {
    10000:  334:        acc += val;
        -:  335:    }
        -:  336:    
        1:  337:    double expected_mean = calculate_expected_mean(random_values);
        1:  338:    double expected_variance = calculate_expected_variance(random_values, false);
        1:  339:    double expected_sample_variance = calculate_expected_variance(random_values, true);
        -:  340:    
       1*:  341:    EXPECT_TRUE(nearly_equal(acc.mean(), expected_mean, 1e-10));
       1*:  342:    EXPECT_TRUE(nearly_equal(acc.variance(), expected_variance, 1e-8));
       1*:  343:    EXPECT_TRUE(nearly_equal(acc.sample_variance(), expected_sample_variance, 1e-8));
       1*:  344:    EXPECT_EQ(acc.size(), 10000u);
        1:  345:}
------------------
_ZN50WelfordAccumulatorTest_RandomValuesStressTest_TestC2Ev:
        1:  322:TEST_F(WelfordAccumulatorTest, RandomValuesStressTest) {
------------------
_ZN50WelfordAccumulatorTest_RandomValuesStressTest_TestD0Ev:
        1:  322:TEST_F(WelfordAccumulatorTest, RandomValuesStressTest) {
------------------
_ZN50WelfordAccumulatorTest_RandomValuesStressTest_TestD2Ev:
        1:  322:TEST_F(WelfordAccumulatorTest, RandomValuesStressTest) {
------------------
_ZN50WelfordAccumulatorTest_RandomValuesStressTest_Test8TestBodyEv:
        1:  322:TEST_F(WelfordAccumulatorTest, RandomValuesStressTest) {
        1:  323:    std::random_device rd;
        1:  324:    std::mt19937 gen(rd());
        1:  325:    std::uniform_real_distribution<double> dis(-100.0, 100.0);
        -:  326:    
        1:  327:    std::vector<double> random_values(10000);
    10001:  328:    for (auto& val : random_values) {
    10000:  329:        val = dis(gen);
        -:  330:    }
        -:  331:    
        1:  332:    welford_accumulator<kbn_sum<double>> acc;
    10001:  333:    for (double val : random_values) {
    10000:  334:        acc += val;
        -:  335:    }
        -:  336:    
        1:  337:    double expected_mean = calculate_expected_mean(random_values);
        1:  338:    double expected_variance = calculate_expected_variance(random_values, false);
        1:  339:    double expected_sample_variance = calculate_expected_variance(random_values, true);
        -:  340:    
       1*:  341:    EXPECT_TRUE(nearly_equal(acc.mean(), expected_mean, 1e-10));
       1*:  342:    EXPECT_TRUE(nearly_equal(acc.variance(), expected_variance, 1e-8));
       1*:  343:    EXPECT_TRUE(nearly_equal(acc.sample_variance(), expected_sample_variance, 1e-8));
       1*:  344:    EXPECT_EQ(acc.size(), 10000u);
        1:  345:}
------------------
        -:  346:
        -:  347:// Test incremental calculation property
        4:  348:TEST_F(WelfordAccumulatorTest, IncrementalCalculation) {
        1:  349:    welford_accumulator<kbn_sum<double>> acc;
        2:  350:    std::vector<double> values = {1.0, 4.0, 7.0, 2.0, 8.0};
        -:  351:    
        1:  352:    std::vector<double> means, variances;
        -:  353:    
        6:  354:    for (double val : values) {
        5:  355:        acc += val;
        5:  356:        means.push_back(acc.mean());
        5:  357:        variances.push_back(acc.variance());
        -:  358:    }
        -:  359:    
        -:  360:    // Check that incremental calculations are consistent
       1*:  361:    EXPECT_EQ(means[0], 1.0);
       1*:  362:    EXPECT_EQ(means[1], 2.5);
       1*:  363:    EXPECT_TRUE(nearly_equal(means[2], 4.0, 1e-10));
       1*:  364:    EXPECT_TRUE(nearly_equal(means[3], 3.5, 1e-10));
       1*:  365:    EXPECT_TRUE(nearly_equal(means[4], 4.4, 1e-10));
        -:  366:    
        -:  367:    // Variance should be zero for single element
       1*:  368:    EXPECT_EQ(variances[0], 0.0);
       1*:  369:    EXPECT_GT(variances[4], 0.0);
        1:  370:}
------------------
_ZN50WelfordAccumulatorTest_IncrementalCalculation_TestC2Ev:
        1:  348:TEST_F(WelfordAccumulatorTest, IncrementalCalculation) {
------------------
_ZN50WelfordAccumulatorTest_IncrementalCalculation_TestD0Ev:
        1:  348:TEST_F(WelfordAccumulatorTest, IncrementalCalculation) {
------------------
_ZN50WelfordAccumulatorTest_IncrementalCalculation_TestD2Ev:
        1:  348:TEST_F(WelfordAccumulatorTest, IncrementalCalculation) {
------------------
_ZN50WelfordAccumulatorTest_IncrementalCalculation_Test8TestBodyEv:
        1:  348:TEST_F(WelfordAccumulatorTest, IncrementalCalculation) {
        1:  349:    welford_accumulator<kbn_sum<double>> acc;
        2:  350:    std::vector<double> values = {1.0, 4.0, 7.0, 2.0, 8.0};
        -:  351:    
        1:  352:    std::vector<double> means, variances;
        -:  353:    
        6:  354:    for (double val : values) {
        5:  355:        acc += val;
        5:  356:        means.push_back(acc.mean());
        5:  357:        variances.push_back(acc.variance());
        -:  358:    }
        -:  359:    
        -:  360:    // Check that incremental calculations are consistent
       1*:  361:    EXPECT_EQ(means[0], 1.0);
       1*:  362:    EXPECT_EQ(means[1], 2.5);
       1*:  363:    EXPECT_TRUE(nearly_equal(means[2], 4.0, 1e-10));
       1*:  364:    EXPECT_TRUE(nearly_equal(means[3], 3.5, 1e-10));
       1*:  365:    EXPECT_TRUE(nearly_equal(means[4], 4.4, 1e-10));
        -:  366:    
        -:  367:    // Variance should be zero for single element
       1*:  368:    EXPECT_EQ(variances[0], 0.0);
       1*:  369:    EXPECT_GT(variances[4], 0.0);
        1:  370:}
------------------
        -:  371:
        -:  372:// Test move semantics in delta2 calculation
        4:  373:TEST_F(WelfordAccumulatorTest, MoveSemanticsInDelta2) {
        1:  374:    welford_accumulator<kbn_sum<double>> acc;
        -:  375:    
        -:  376:    // Add values to test the move operation in delta2 calculation
        1:  377:    acc += 10.0;
        1:  378:    acc += 20.0;
        -:  379:    
        -:  380:    // The move operation should work correctly without affecting results
       1*:  381:    EXPECT_EQ(acc.mean(), 15.0);
       1*:  382:    EXPECT_EQ(acc.variance(), 25.0); // variance of {10, 20} is 25
        1:  383:}
------------------
_ZN49WelfordAccumulatorTest_MoveSemanticsInDelta2_TestC2Ev:
        1:  373:TEST_F(WelfordAccumulatorTest, MoveSemanticsInDelta2) {
------------------
_ZN49WelfordAccumulatorTest_MoveSemanticsInDelta2_TestD0Ev:
        1:  373:TEST_F(WelfordAccumulatorTest, MoveSemanticsInDelta2) {
------------------
_ZN49WelfordAccumulatorTest_MoveSemanticsInDelta2_TestD2Ev:
        1:  373:TEST_F(WelfordAccumulatorTest, MoveSemanticsInDelta2) {
------------------
_ZN49WelfordAccumulatorTest_MoveSemanticsInDelta2_Test8TestBodyEv:
        1:  373:TEST_F(WelfordAccumulatorTest, MoveSemanticsInDelta2) {
        1:  374:    welford_accumulator<kbn_sum<double>> acc;
        -:  375:    
        -:  376:    // Add values to test the move operation in delta2 calculation
        1:  377:    acc += 10.0;
        1:  378:    acc += 20.0;
        -:  379:    
        -:  380:    // The move operation should work correctly without affecting results
       1*:  381:    EXPECT_EQ(acc.mean(), 15.0);
       1*:  382:    EXPECT_EQ(acc.variance(), 25.0); // variance of {10, 20} is 25
        1:  383:}
------------------
        -:  384:
        -:  385:// Test edge case with identical values
        4:  386:TEST_F(WelfordAccumulatorTest, IdenticalValues) {
        1:  387:    welford_accumulator<kbn_sum<double>> acc;
        -:  388:    
      101:  389:    for (int i = 0; i < 100; ++i) {
      100:  390:        acc += 42.0;
        -:  391:    }
        -:  392:    
       1*:  393:    EXPECT_EQ(acc.mean(), 42.0);
       1*:  394:    EXPECT_EQ(acc.sum(), 4200.0);
       1*:  395:    EXPECT_EQ(acc.variance(), 0.0); // All identical values should have zero variance
       1*:  396:    EXPECT_EQ(acc.sample_variance(), 0.0);
       1*:  397:    EXPECT_EQ(acc.size(), 100u);
        1:  398:}
------------------
_ZN43WelfordAccumulatorTest_IdenticalValues_TestC2Ev:
        1:  386:TEST_F(WelfordAccumulatorTest, IdenticalValues) {
------------------
_ZN43WelfordAccumulatorTest_IdenticalValues_TestD0Ev:
        1:  386:TEST_F(WelfordAccumulatorTest, IdenticalValues) {
------------------
_ZN43WelfordAccumulatorTest_IdenticalValues_TestD2Ev:
        1:  386:TEST_F(WelfordAccumulatorTest, IdenticalValues) {
------------------
_ZN43WelfordAccumulatorTest_IdenticalValues_Test8TestBodyEv:
        1:  386:TEST_F(WelfordAccumulatorTest, IdenticalValues) {
        1:  387:    welford_accumulator<kbn_sum<double>> acc;
        -:  388:    
      101:  389:    for (int i = 0; i < 100; ++i) {
      100:  390:        acc += 42.0;
        -:  391:    }
        -:  392:    
       1*:  393:    EXPECT_EQ(acc.mean(), 42.0);
       1*:  394:    EXPECT_EQ(acc.sum(), 4200.0);
       1*:  395:    EXPECT_EQ(acc.variance(), 0.0); // All identical values should have zero variance
       1*:  396:    EXPECT_EQ(acc.sample_variance(), 0.0);
       1*:  397:    EXPECT_EQ(acc.size(), 100u);
        1:  398:}
------------------
