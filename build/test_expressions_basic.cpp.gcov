        -:    0:Source:/home/spinoza/github/alpha/algebraic_reducers/tests/test_expressions_basic.cpp
        -:    1:#include <gtest/gtest.h>
        -:    2:#include "kbn_sum.hpp"
        -:    3:#include "welford_accumulator.hpp"
        -:    4:#include "exp/accumulator_exp.hpp"
        -:    5:#include "exp/unary_accumulator_exp.hpp"
        -:    6:#include "exp/binary_accumulator_exp.hpp"
        -:    7:
        -:    8:using namespace algebraic_accumulator;
        -:    9:using namespace algebraic_accumulators;
        -:   10:
        -:   11:class ExpressionsBasicTest : public ::testing::Test {
        -:   12:protected:
        3:   13:    void SetUp() override {}
        3:   14:    void TearDown() override {}
        -:   15:};
        -:   16:
        -:   17:// Test that expression headers compile and basic operations work
        4:   18:TEST_F(ExpressionsBasicTest, HeadersCompileSuccessfully) {
        -:   19:    // If this test compiles and runs, it means the expression template 
        -:   20:    // headers are syntactically correct and can be included
        1:   21:    kbn_sum<double> sum1(10.0);
        1:   22:    kbn_sum<double> sum2(20.0);
        -:   23:    
        -:   24:    // Test the operator+ which should work
        1:   25:    auto result = sum1 + sum2;
       1*:   26:    EXPECT_EQ(static_cast<double>(result), 30.0);
        1:   27:}
------------------
_ZN52ExpressionsBasicTest_HeadersCompileSuccessfully_TestC2Ev:
        1:   18:TEST_F(ExpressionsBasicTest, HeadersCompileSuccessfully) {
------------------
_ZN52ExpressionsBasicTest_HeadersCompileSuccessfully_TestD0Ev:
        1:   18:TEST_F(ExpressionsBasicTest, HeadersCompileSuccessfully) {
------------------
_ZN52ExpressionsBasicTest_HeadersCompileSuccessfully_TestD2Ev:
        1:   18:TEST_F(ExpressionsBasicTest, HeadersCompileSuccessfully) {
------------------
_ZN52ExpressionsBasicTest_HeadersCompileSuccessfully_Test8TestBodyEv:
        1:   18:TEST_F(ExpressionsBasicTest, HeadersCompileSuccessfully) {
        -:   19:    // If this test compiles and runs, it means the expression template 
        -:   20:    // headers are syntactically correct and can be included
        1:   21:    kbn_sum<double> sum1(10.0);
        1:   22:    kbn_sum<double> sum2(20.0);
        -:   23:    
        -:   24:    // Test the operator+ which should work
        1:   25:    auto result = sum1 + sum2;
       1*:   26:    EXPECT_EQ(static_cast<double>(result), 30.0);
        1:   27:}
------------------
        -:   28:
        -:   29:// Test that the types can be instantiated (even if not used)
        4:   30:TEST_F(ExpressionsBasicTest, TypesCanBeInstantiated) {
        -:   31:    // Test that these types exist and can be referenced
        -:   32:    static_assert(std::is_class_v<accumulator_exp<kbn_sum<double>>>);
        -:   33:    
        -:   34:    // Basic checks that the expression template files are included properly
       1*:   35:    EXPECT_TRUE(true);
        1:   36:}
------------------
_ZN48ExpressionsBasicTest_TypesCanBeInstantiated_TestC2Ev:
        1:   30:TEST_F(ExpressionsBasicTest, TypesCanBeInstantiated) {
------------------
_ZN48ExpressionsBasicTest_TypesCanBeInstantiated_TestD0Ev:
        1:   30:TEST_F(ExpressionsBasicTest, TypesCanBeInstantiated) {
------------------
_ZN48ExpressionsBasicTest_TypesCanBeInstantiated_TestD2Ev:
        1:   30:TEST_F(ExpressionsBasicTest, TypesCanBeInstantiated) {
------------------
_ZN48ExpressionsBasicTest_TypesCanBeInstantiated_Test8TestBodyEv:
        1:   30:TEST_F(ExpressionsBasicTest, TypesCanBeInstantiated) {
        -:   31:    // Test that these types exist and can be referenced
        -:   32:    static_assert(std::is_class_v<accumulator_exp<kbn_sum<double>>>);
        -:   33:    
        -:   34:    // Basic checks that the expression template files are included properly
       1*:   35:    EXPECT_TRUE(true);
        1:   36:}
------------------
        -:   37:
        -:   38:// Test coverage for expression-related functionality that might exist
        4:   39:TEST_F(ExpressionsBasicTest, ExpressionRelatedFunctionality) {
        1:   40:    kbn_sum<double> acc1(5.0);
        1:   41:    kbn_sum<double> acc2(3.0);
        -:   42:    
        -:   43:    // Test binary operations
        1:   44:    auto sum_result = acc1 + acc2;
       1*:   45:    EXPECT_EQ(static_cast<double>(sum_result), 8.0);
        -:   46:    
        -:   47:    // Test that these operations preserve the KBN sum properties
       1*:   48:    EXPECT_GT(static_cast<double>(sum_result), 7.9);
       1*:   49:    EXPECT_LT(static_cast<double>(sum_result), 8.1);
        1:   50:}
------------------
_ZN56ExpressionsBasicTest_ExpressionRelatedFunctionality_TestC2Ev:
        1:   39:TEST_F(ExpressionsBasicTest, ExpressionRelatedFunctionality) {
------------------
_ZN56ExpressionsBasicTest_ExpressionRelatedFunctionality_TestD0Ev:
        1:   39:TEST_F(ExpressionsBasicTest, ExpressionRelatedFunctionality) {
------------------
_ZN56ExpressionsBasicTest_ExpressionRelatedFunctionality_TestD2Ev:
        1:   39:TEST_F(ExpressionsBasicTest, ExpressionRelatedFunctionality) {
------------------
_ZN56ExpressionsBasicTest_ExpressionRelatedFunctionality_Test8TestBodyEv:
        1:   39:TEST_F(ExpressionsBasicTest, ExpressionRelatedFunctionality) {
        1:   40:    kbn_sum<double> acc1(5.0);
        1:   41:    kbn_sum<double> acc2(3.0);
        -:   42:    
        -:   43:    // Test binary operations
        1:   44:    auto sum_result = acc1 + acc2;
       1*:   45:    EXPECT_EQ(static_cast<double>(sum_result), 8.0);
        -:   46:    
        -:   47:    // Test that these operations preserve the KBN sum properties
       1*:   48:    EXPECT_GT(static_cast<double>(sum_result), 7.9);
       1*:   49:    EXPECT_LT(static_cast<double>(sum_result), 8.1);
        1:   50:}
------------------
